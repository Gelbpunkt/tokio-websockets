name: Check build

on: [push]

env:
  CARGO_BUILD_TARGET: x86_64-unknown-linux-gnu

jobs:
  codespell:
    name: Run codespell
    runs-on: ubuntu-latest

    steps:
      - name: Run codespell
        uses: codespell-project/actions-codespell@v2

  run-tests:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Provided by GitHub, 4-core, 16GB RAM
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-musl
            container: chimeralinux/chimera:latest
            apk-add: bash ca-certificates cmake curl git gmake go clang clang-devel libffi-devel libgit2 libtool linux-headers lld llvm-devel openssl-devel pkgconf
          - runner: ubuntu-latest
            target: i686-unknown-linux-gnu
            container: i386/debian:latest
            apt-install: bindgen clang cmake curl golang libssl-dev make openssl pkg-config
          - runner: ubuntu-latest
            target: i586-alpine-linux-musl
            container: i386/alpine:edge
            apk-add: bash clang19 clang19-dev cmake gcc git go linux-headers make musl-dev openssl-dev perl
          # Also provided by GitHub, 4-core, 16GB RAM, Neoverse N2
          - runner: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
          - runner: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
            container: chimeralinux/chimera:latest
            apk-add: bash ca-certificates cmake curl git gmake go clang clang-devel libffi-devel libgit2 libtool linux-headers lld llvm-devel openssl-devel pkgconf
          - runner: ubuntu-24.04-arm
            target: armv7-unknown-linux-gnueabihf
            container: arm32v7/debian:latest
            apt-install: bindgen clang cmake curl golang libssl-dev make openssl pkg-config
          - runner: ubuntu-24.04-arm
            target: armv7-alpine-linux-musleabihf
            container: arm32v7/alpine:edge
            apk-add: bash clang19 clang19-dev cmake gcc git go linux-headers make musl-dev openssl-dev perl
          # Also provided by GitHub, 4-core, 16GB RAM
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
            choco-install: nasm ninja openssl
            path-append: C:\Program Files\NASM
          - runner: windows-latest
            target: x86_64-pc-windows-gnu
            choco-install: nasm ninja openssl
            path-append: C:\Program Files\NASM
          # Also provided by GitHub, 4-core, 14GB RAM
          - runner: macos-13
            target: x86_64-apple-darwin
            brew-install: go
          # Also provided by GitHub, 3-core, 7GB RAM
          - runner: macos-latest
            target: aarch64-apple-darwin
            brew-install: go
          # Selfhosted, 8-core, 16GB RAM, SpacemiT M1
          - runner: riscv64-gnu
            target: riscv64gc-unknown-linux-gnu
          # Provided by IBM, 2-core, 8GB RAM, IBM z15
          - runner: s390x-gnu
            target: s390x-unknown-linux-gnu

    name: Run tests (${{ matrix.target }})
    runs-on: ${{ matrix.runner }}
    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}

    container: ${{ matrix.container }}

    steps:
      - name: Install apk dependencies
        if: ${{ matrix.apk-add != '' }}
        run: |
          apk update
          apk upgrade
          apk add ${{ matrix.apk-add }}

      - name: Install apt dependencies (with sudo)
        if: ${{ matrix.apt-install != '' && matrix.container == '' }}
        run: |
          sudo apt install -y --no-install-recommends ${{ matrix.apt-install }}

      - name: Install apt dependencies
        if: ${{ matrix.apt-install != '' && matrix.container != '' }}
        run: |
          apt update
          apt install -y --no-install-recommends ${{ matrix.apt-install }}

      - name: Install choco dependencies
        if: ${{ matrix.choco-install != '' }}
        run: |
          choco install -y ${{ matrix.choco-install }}
          echo "${{ matrix.path-append }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install brew dependencies
        if: ${{ matrix.brew-install != '' }}
        run: |
          brew update
          echo "${{ matrix.brew-install}}" | xargs -n 1 brew install

      # We cannot use actions/checkout here because that's a nodejs action
      # and those are beyond broken inside non-x86_64 containers.
      - name: Checkout sources
        uses: taiki-e/checkout-action@v1

      # musl.rs does not support x86 and ARMv7 yet
      - name: Install nightly toolchain
        if: ${{ !contains(matrix.target, 'musl') }}
        run: |
          curl https://sh.rustup.rs | sh -s -- --profile minimal --default-host ${{ matrix.target }} --default-toolchain nightly --component rust-src -y
          echo "${CARGO_HOME:-$HOME/.cargo}/bin" >> $GITHUB_PATH

      - name: Install nightly toolchain (musl)
        if: ${{ contains(matrix.target, 'musl') && !contains(matrix.target, 'alpine') }}
        run: |
          curl https://musl.rs/install.sh | sh

      - name: Install Rust and configure like nightly (musl)
        if: ${{ contains(matrix.target, 'alpine') }}
        run: |
          apk add cargo rust rust-src
          echo "RUSTC_BOOTSTRAP=1" >> $GITHUB_ENV

      # Chimera Linux comes with weird LLVM paths
      - name: Symlink clang lib dir
        if: ${{ contains(matrix.container, 'chimera') }}
        run: |
          LIBDIR=$(find /usr/lib/clang/19/lib/ -name '*-musl' | head -n 1)
          echo "Found clang libdir $LIBDIR"
          ln -s /usr/lib/clang/19/lib/$LIBDIR /usr/lib/clang/19/lib/${{ matrix.target }}

      - name: Use MSRV-specific .cargo/config.toml
        run: |
          rm .cargo/config.toml
          mv .cargo/config.toml.msrv .cargo/config.toml

      - name: Add problem matchers
        run: echo "::add-matcher::.github/rust.json"

      - name: Run tests
        run: |
          cargo test --all-targets --all-features

  run-fuzzer:
    name: Run fuzzer
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rust-src

      - name: Use MSRV-specific .cargo/config.toml
        run: |
          mv .cargo/config.toml.msrv .cargo/config.toml

      - name: Install cargo-fuzz
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-fuzz
          locked: false

      - name: Run stream fuzzer for a limited time
        run: |
          RUST_BACKTRACE=1 cargo fuzz run stream -- -max_total_time=900

  build-docs:
    name: Build docs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rust-src

      - name: Add problem matchers
        run: echo "::add-matcher::.github/rust.json"

      - name: Build docs
        env:
          RUSTDOCFLAGS: --cfg docsrs
        run: |
          cargo doc --no-deps --all-features

  clippy:
    name: Clippy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rust-src,clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Add problem matchers
        run: echo "::add-matcher::.github/rust.json"

      - name: Run clippy
        run: cargo clippy --all-features --all-targets

      - name: Run clippy (fuzz)
        run: cargo clippy --manifest-path fuzz/Cargo.toml --all-features --all-targets

  rustfmt:
    name: Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rustfmt

      - name: Add problem matchers
        run: echo "::add-matcher::.github/rust.json"

      - name: Run cargo fmt
        run: cargo fmt -- --check

      - name: Run cargo fmt (fuzzer)
        run: cargo fmt --manifest-path fuzz/Cargo.toml -- --check

  min-vers:
    name: Minimal crate versions
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rust-src

      - name: Install cargo-hack
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-hack
          locked: false

      - name: Install cargo-minimal-versions
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-minimal-versions
          locked: false

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Add problem matchers
        run: echo "::add-matcher::.github/rust.json"

      - name: Check minimal versions
        run: cargo minimal-versions check

  features:
    name: Feature powerset (nightly)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rust-src

      - name: Install cargo-hack
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-hack
          locked: false

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Add problem matchers
        run: echo "::add-matcher::.github/rust.json"

      - name: Check powerset
        run: |
          cargo hack check \
            --feature-powerset \
            --no-dev-deps \
            --exclude-features aws-lc-rs,rustls-tls12 \
            --group-features client,fastrand,sha1_smol \
            --group-features server,sha1_smol

  msrv:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Provided by GitHub
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          # Also provided by GitHub
          - runner: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu

    name: Feature powerset (MSRV) (${{ matrix.target }})
    runs-on: ${{ matrix.runner }}
    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rust-src

      - name: Get latest compatible dependencies for MSRV
        run: CARGO_RESOLVER_INCOMPATIBLE_RUST_VERSIONS=fallback cargo update

      - name: Use MSRV-specific .cargo/config.toml
        run: |
          mv .cargo/config.toml.msrv .cargo/config.toml

      - name: Install 1.79.0 toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.79.0

      - name: Install cargo-hack
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-hack
          locked: false

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Add problem matchers
        run: echo "::add-matcher::.github/rust.json"

      - name: Check powerset
        run: |
          cargo hack check \
            --feature-powerset \
            --no-dev-deps \
            --exclude-features aws-lc-rs,rustls-tls12,nightly \
            --group-features client,fastrand,sha1_smol \
            --group-features server,sha1_smol
