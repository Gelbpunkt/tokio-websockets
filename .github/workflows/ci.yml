name: Check build

on: [push]

env:
  CARGO_BUILD_TARGET: x86_64-unknown-linux-gnu
  OPENSSL_VERSION: 3.3.2

jobs:
  codespell:
    name: Run codespell
    runs-on: ubuntu-latest

    steps:
      - name: Run codespell
        uses: codespell-project/actions-codespell@v2

  run-tests:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Provided by GitHub, 4-core, 16GB RAM
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            apt-install: lld
          - runner: ubuntu-latest
            target: i686-unknown-linux-gnu
            apt-arch-setup: i386
            apt-install: bindgen lld crossbuild-essential-i386 libssl-dev:i386 openssl:i386
          # Also provided by GitHub, 4-core, 16GB RAM
          - runner: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            apt-install: lld
          - runner: ubuntu-24.04-arm
            target: armv7-unknown-linux-gnueabihf
            apt-arch-setup: armhf
            apt-install: bindgen lld crossbuild-essential-armhf libssl-dev:armhf openssl:armhf
          # Also provided by GitHub, 4-core, 16GB RAM
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
            choco-install: ninja openssl
          - runner: windows-latest
            target: x86_64-pc-windows-gnu
            choco-install: ninja openssl
          # Also provided by GitHub, 4-core, 14GB RAM
          - runner: macos-13
            target: x86_64-apple-darwin
            brew-install: go
          # Also provided by GitHub, 3-core, 7GB RAM
          - runner: macos-latest
            target: aarch64-apple-darwin
            brew-install: go
          # Selfhosted, 6-core, 8GB RAM, Neoverse N1
          - runner: aarch64-musl
            target: aarch64-unknown-linux-musl
          # Selfhosted, 8-core, 16GB RAM, SpacemiT M1
          #- runner: riscv64
          #  target: riscv64gc-unknown-linux-gnu
          # Provided by IBM, 2-core, 8GB RAM, IBM z15
          - runner: s390x-gnu
            target: s390x-unknown-linux-gnu

    name: Run tests (${{ matrix.target }})
    runs-on: ${{ matrix.runner }}
    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}
      PKG_CONFIG_PATH_i686_unknown_linux_gnu: /usr/lib/i686-linux-gnu/pkgconfig
      PKG_CONFIG_PATH_armv7_unknown_linux_gnueabihf: /usr/lib/arm-linux-gnueabihf/pkgconfig
      PKG_CONFIG_SYSROOT_DIR:
      X86_64_PC_WINDOWS_MSVC_OPENSSL_LIB_DIR: C:\Program Files\OpenSSL-Win64
      X86_64_PC_WINDOWS_GNU_OPENSSL_LIB_DIR: C:\Program Files\OpenSSL-Win64

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up apt for cross architecture packages
        if: ${{ matrix.apt-arch-setup != '' }}
        run: |
          sudo dpkg --add-architecture ${{ matrix.apt-arch-setup }}
          sudo apt update -y

      - name: Install apt dependencies
        if: ${{ matrix.apt-install != '' }}
        run: |
          sudo apt install -y --no-install-recommends ${{ matrix.apt-install }}

      - name: Install choco dependencies
        if: ${{ matrix.choco-install != '' }}
        run: |
          choco install -y ${{ matrix.choco-install }}

      - uses: ilammy/setup-nasm@v1
        if: ${{ matrix.choco-install != '' }} # Aka on Windows

      - name: Install brew dependencies
        if: ${{ matrix.brew-install != '' }}
        run: |
          brew update
          echo "${{ matrix.brew-install}}" | xargs -n 1 brew install

      - name: Install nightly toolchain
        if: ${{ !contains(matrix.target, 'musl') }}
        uses: dtolnay/rust-toolchain@master
        with:
          targets: ${{ matrix.target }}
          toolchain: nightly
          components: rust-src

      - name: Install nightly toolchain (musl)
        if: ${{ contains(matrix.target, 'musl') }}
        run: |
          wget https://dl.musl.rs/nightly/rust-nightly-${{ matrix.target }}.tar.xz -O rust.tar.xz
          tar xf rust.tar.xz
          cd rust-nightly-${{ matrix.target }}
          doas ./install.sh
          cd ..
          wget https://dl.musl.rs/nightly/rust-src-nightly.tar.xz
          tar xf rust-src-nightly.tar.xz
          cd rust-src-nightly
          doas ./install.sh

      # aws-lc uses CMAKE_LINKER in its CMake rules, which cannot properly be set from Rust code
      # so it falls back to ld, which cannot cross-link.
      # Our musl targets run on Chimera Linux, which already uses LLD.
      - name: Use LLD as /usr/bin/ld
        if: ${{ contains(matrix.target, 'gnu') && !contains(matrix.target, 'windows') }}
        run: |
          sudo rm /usr/bin/ld
          sudo ln -s /usr/bin/ld.lld /usr/bin/ld

      - name: Use MSRV-specific .cargo/config.toml
        run: |
          rm .cargo/config.toml
          mv .cargo/config.toml.msrv .cargo/config.toml

      - name: Add problem matchers
        run: echo "::add-matcher::.github/rust.json"

      - name: Run tests
        run: |
          cargo test --all-targets --all-features

  run-fuzzer:
    name: Run fuzzer
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rust-src

      - name: Use MSRV-specific .cargo/config.toml
        run: |
          mv .cargo/config.toml.msrv .cargo/config.toml

      - name: Install cargo-fuzz
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-fuzz
          locked: false

      - name: Run stream fuzzer for a limited time
        run: |
          RUST_BACKTRACE=1 cargo fuzz run stream -- -max_total_time=900

  build-docs:
    name: Build docs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rust-src

      - name: Add problem matchers
        run: echo "::add-matcher::.github/rust.json"

      - name: Build docs
        env:
          RUSTDOCFLAGS: --cfg docsrs
        run: |
          cargo doc --no-deps --all-features

  clippy:
    name: Clippy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rust-src,clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Add problem matchers
        run: echo "::add-matcher::.github/rust.json"

      - name: Run clippy
        run: cargo clippy --all-features --all-targets

      - name: Run clippy (fuzz)
        run: cargo clippy --manifest-path fuzz/Cargo.toml --all-features --all-targets

  rustfmt:
    name: Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rustfmt

      - name: Add problem matchers
        run: echo "::add-matcher::.github/rust.json"

      - name: Run cargo fmt
        run: cargo fmt -- --check

      - name: Run cargo fmt (fuzzer)
        run: cargo fmt --manifest-path fuzz/Cargo.toml -- --check

  min-vers:
    name: Minimal crate versions
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rust-src

      - name: Install cargo-hack
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-hack
          locked: false

      - name: Install cargo-minimal-versions
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-minimal-versions
          locked: false

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Add problem matchers
        run: echo "::add-matcher::.github/rust.json"

      - name: Check minimal versions
        run: cargo minimal-versions check

  features:
    name: Feature powerset (nightly)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rust-src

      - name: Install cargo-hack
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-hack
          locked: false

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Add problem matchers
        run: echo "::add-matcher::.github/rust.json"

      - name: Check powerset
        run: |
          cargo hack check \
            --feature-powerset \
            --no-dev-deps \
            --exclude-features aws-lc-rs,rustls-tls12 \
            --group-features client,fastrand,sha1_smol \
            --group-features server,sha1_smol

  msrv:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Provided by GitHub
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          # Also provided by GitHub
          - runner: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu

    name: Feature powerset (MSRV) (${{ matrix.target }})
    runs-on: ${{ matrix.runner }}
    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Use MSRV-specific .cargo/config.toml
        run: |
          mv .cargo/config.toml.msrv .cargo/config.toml

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly

      - name: Get latest compatible dependencies for MSRV
        run: CARGO_RESOLVER_INCOMPATIBLE_RUST_VERSIONS=fallback cargo update

      - name: Install 1.79.0 toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.79.0

      - name: Install cargo-hack
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-hack
          locked: false

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Add problem matchers
        run: echo "::add-matcher::.github/rust.json"

      - name: Check powerset
        run: |
          cargo hack check \
            --feature-powerset \
            --no-dev-deps \
            --exclude-features aws-lc-rs,rustls-tls12,nightly \
            --group-features client,fastrand,sha1_smol \
            --group-features server,sha1_smol
